###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             19/Oct/2014  14:18:52 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAutom #
#                          ation\SampleLight\Source\zcl_samplelight.c         #
#    Command line       =  -f "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeA #
#                          utomation\SampleLight\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeA #
#                          utomation\SampleLight\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=1        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\ti\Z-Stack Home     #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"        #
#                          "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAuto #
#                          mation\SampleLight\Source\zcl_samplelight.c" -D    #
#                          SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D          #
#                          xNV_RESTORE -D xHOLD_AUTO_START -D ZTOOL_P1 -D     #
#                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D              #
#                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE   #
#                          -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D        #
#                          ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D        #
#                          ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC    #
#                          -D FEATURE_SYSTEM_STATS -lC "D:\ti\Z-Stack Home    #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\CoordinatorEB\List\" -lA "D:\ti\Z-Stack    #
#                          Home 1.2.1\Projects\zstack\HomeAutomation\SampleLi #
#                          ght\CC2530DB\CoordinatorEB\List\" --diag_suppress  #
#                          Pe001,Pa010 -o "D:\ti\Z-Stack Home                 #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\CoordinatorEB\Obj\" -e --debug             #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\ti\Z-Stack Home        #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\" -I "D:\ti\Z-Stack Home                   #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\Source\" -I "D:\ti\Z-Stack Home         #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\Source\" -I "D:\ti\Z-Stack Home      #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\ZMain\TI2530DB\" -I               #
#                          "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAuto #
#                          mation\SampleLight\CC2530DB\..\..\..\..\..\Compone #
#                          nts\hal\include\" -I "D:\ti\Z-Stack Home           #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\hal\target\CC253 #
#                          0EB\" -I "D:\ti\Z-Stack Home                       #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\mac\include\"    #
#                          -I "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeA #
#                          utomation\SampleLight\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\high_level\" -I "D:\ti\Z-Stack Home     #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\mac\low_level\sr #
#                          f04\" -I "D:\ti\Z-Stack Home                       #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\mac\low_level\sr #
#                          f04\single_chip\" -I "D:\ti\Z-Stack Home           #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\mt\" -I          #
#                          "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAuto #
#                          mation\SampleLight\CC2530DB\..\..\..\..\..\Compone #
#                          nts\osal\include\" -I "D:\ti\Z-Stack Home          #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\services\saddr\" #
#                           -I "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\Home #
#                          Automation\SampleLight\CC2530DB\..\..\..\..\..\Com #
#                          ponents\services\sdata\" -I "D:\ti\Z-Stack Home    #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\stack\af\" -I    #
#                          "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAuto #
#                          mation\SampleLight\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\nwk\" -I "D:\ti\Z-Stack Home             #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\stack\sapi\" -I  #
#                          "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAuto #
#                          mation\SampleLight\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\sec\" -I "D:\ti\Z-Stack Home             #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\stack\sys\" -I   #
#                          "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAuto #
#                          mation\SampleLight\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\zcl\" -I "D:\ti\Z-Stack Home             #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\stack\zdo\" -I   #
#                          "D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAuto #
#                          mation\SampleLight\CC2530DB\..\..\..\..\..\Compone #
#                          nts\zmac\" -I "D:\ti\Z-Stack Home                  #
#                          1.2.1\Projects\zstack\HomeAutomation\SampleLight\C #
#                          C2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz  #
#                          --require_prototypes                               #
#    List file          =  D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAutom #
#                          ation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_ #
#                          samplelight.lst                                    #
#    Object file        =  D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAutom #
#                          ation\SampleLight\CC2530DB\CoordinatorEB\Obj\zcl_s #
#                          amplelight.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\ti\Z-Stack Home 1.2.1\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-07-01 22:24:24 -0700 (Tue, 01 Jul 2014) $
      4            Revision:       $Revision: 39317 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "zcl.h"
     75          #include "zcl_general.h"
     76          #include "zcl_ha.h"
     77          #include "zcl_ezmode.h"
     78          #include "zcl_diagnostic.h"
     79          
     80          #include "zcl_samplelight.h"
     81          
     82          #include "onboard.h"
     83          
     84          /* HAL */
     85          #include "hal_lcd.h"
     86          #include "hal_led.h"
     87          #include "hal_key.h"
     88          
     89          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     90                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     91          #include "zgp_translationtable.h"
     92            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     93              #define ZGP_AUTO_TT
     94            #endif
     95          #endif
     96          
     97          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
     98          #include "math.h"
     99          #include "hal_timer.h"
    100          #endif
    101          
    102          #include "NLMEDE.h"
    103          
    104          /*********************************************************************
    105           * MACROS
    106           */
    107          
    108          /*********************************************************************
    109           * CONSTANTS
    110           */
    111          #if (defined HAL_BOARD_ZLIGHT)
    112          #define LEVEL_MAX                 0xFE
    113          #define LEVEL_MIN                 0x0
    114          #define GAMMA_VALUE               2
    115          #define PWM_FULL_DUTY_CYCLE       1000
    116          #elif (defined HAL_PWM)  
    117          #define LEVEL_MAX                 0xFE
    118          #define LEVEL_MIN                 0x0
    119          #define GAMMA_VALUE               2
    120          #define PWM_FULL_DUTY_CYCLE       100
    121          #endif
    122          
    123          /*********************************************************************
    124           * TYPEDEFS
    125           */
    126          
    127          /*********************************************************************
    128           * GLOBAL VARIABLES
    129           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          
    134          /*********************************************************************
    135           * GLOBAL FUNCTIONS
    136           */
    137          
    138          /*********************************************************************
    139           * LOCAL VARIABLES
    140           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    142          
    143          #ifdef ZCL_EZMODE
    144          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    145          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    146          
    147          
    148          // register EZ-Mode with task information (timeout events, callback, etc...)

   \                                 In  segment XDATA_ROM_C, align 1
    149          static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
   \                     zclSampleLight_RegisterEZModeData:
   \   000000   ....         DW zclSampleLight_TaskID
   \   000002   0800         DW 8
   \   000004   0400         DW 4
   \   000006   ....         DW zclSampleLightSeqNum
   \   000008   ....         DW ??zclSampleLight_EZModeCB?relay
    150          {
    151            &zclSampleLight_TaskID,
    152            SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    153            SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    154            &zclSampleLightSeqNum,
    155            zclSampleLight_EZModeCB
    156          };
    157          
    158          #else
    159          uint16 bindingInClusters[] =
    160          {
    161            ZCL_CLUSTER_ID_GEN_ON_OFF
    162          #ifdef ZCL_LEVEL_CTRL
    163            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    164          #endif
    165          };
    166          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    167          
    168          #endif  // ZCL_EZMODE
    169          
    170          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    171          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    172          {
    173            SAMPLELIGHT_ENDPOINT,
    174            &zclSampleLight_TaskID,
    175            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    176            (afNetworkLatencyReq_t)0            // No Network Latency req
    177          };
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    183          devStates_t zclSampleLight_NwkState = DEV_INIT;
   \                     zclSampleLight_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleLight_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    184          
    185          #if ZCL_LEVEL_CTRL
    186          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
    187          uint8 zclSampleLight_NewLevel;        // new level when done moving
    188          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
    189          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    190          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
    191          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    192          #endif
    193          
    194          /*********************************************************************
    195           * LOCAL FUNCTIONS
    196           */
    197          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    198          static void zclSampleLight_BasicResetCB( void );
    199          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
    200          static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    201          static void zclSampleLight_OnOffCB( uint8 cmd );
    202          static void zclSampleLight_ProcessIdentifyTimeChange( void );
    203          #ifdef ZCL_LEVEL_CTRL
    204          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    205          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    206          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    207          static void zclSampleLight_LevelControlStopCB( void );
    208          static void zclSampleLight_DefaultMove( void );
    209          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    210          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    211          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    212          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    213          static void zclSampleLight_AdjustLightLevel( void );
    214          #endif
    215          
    216          // app display functions
    217          static void zclSampleLight_LcdDisplayUpdate( void );
    218          #ifdef LCD_SUPPORTED
    219          static void zclSampleLight_LcdDisplayMainMode( void );
    220          static void zclSampleLight_LcdDisplayHelpMode( void );
    221          #endif
    222          static void zclSampleLight_DisplayLight( void );
    223          
    224          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    225          void zclSampleLight_UpdateLampLevel( uint8 level );
    226          #endif
    227          
    228          // Functions to process ZCL Foundation incoming Command/Response messages
    229          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    230          #ifdef ZCL_READ
    231          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    232          #endif
    233          #ifdef ZCL_WRITE
    234          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    235          #endif
    236          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    237          #ifdef ZCL_DISCOVER
    238          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    239          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    240          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    241          #endif
    242          
    243          /*********************************************************************
    244           * STATUS STRINGS
    245           */
    246          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    247          const char sDeviceName[]   = "  Sample Light";
   \                     sDeviceName:
   \   000000   20205361     DB "  Sample Light"
   \            6D706C65
   \            204C6967
   \            687400  

   \                                 In  segment XDATA_ROM_C, align 1
    248          const char sClearLine[]    = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    249          const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
   \                     sSwLight:
   \   000000   5357313A     DB "SW1: ToggleLight"
   \            20546F67
   \            676C654C
   \            69676874
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    250          const char sSwEZMode[]     = "SW2: EZ-Mode";
   \                     sSwEZMode:
   \   000000   5357323A     DB "SW2: EZ-Mode"
   \            20455A2D
   \            4D6F6465
   \            00      

   \                                 In  segment XDATA_I, align 1, keep-with-next
    251          char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
   \                     sSwHelp:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for sSwHelp>`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ROM_C, align 1
    252          const char sLightOn[]      = "    LIGHT ON ";
   \                     sLightOn:
   \   000000   20202020     DB "    LIGHT ON "
   \            4C494748
   \            54204F4E
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
    253          const char sLightOff[]     = "    LIGHT OFF";
   \                     sLightOff:
   \   000000   20202020     DB "    LIGHT OFF"
   \            4C494748
   \            54204F46
   \            4600    
    254           #if ZCL_LEVEL_CTRL
    255           char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
    256           #endif
    257          #endif
    258          
    259          /*********************************************************************
    260           * ZCL General Profile Callback table
    261           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    262          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   000020                REQUIRE __INIT_XDATA_I
    263          {
    264            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    265            zclSampleLight_IdentifyCB,              // Identify command
    266          #ifdef ZCL_EZMODE
    267            NULL,                                   // Identify EZ-Mode Invoke command
    268            NULL,                                   // Identify Update Commission State command
    269          #endif
    270            NULL,                                   // Identify Trigger Effect command
    271            zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
    272            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    273            NULL,                                   // On/Off cluster enhanced command Off with Effect
    274            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    275            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    276          #ifdef ZCL_LEVEL_CTRL
    277            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    278            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    279            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    280            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    281          #endif
    282          #ifdef ZCL_GROUPS
    283            NULL,                                   // Group Response commands
    284          #endif
    285          #ifdef ZCL_SCENES
    286            NULL,                                  // Scene Store Request command
    287            NULL,                                  // Scene Recall Request command
    288            NULL,                                  // Scene Response command
    289          #endif
    290          #ifdef ZCL_ALARMS
    291            NULL,                                  // Alarm (Response) commands
    292          #endif
    293          #ifdef SE_UK_EXT
    294            NULL,                                  // Get Event Log command
    295            NULL,                                  // Publish Event Log command
    296          #endif
    297            NULL,                                  // RSSI Location command
    298            NULL                                   // RSSI Location Response command
    299          };
    300          
    301          /*********************************************************************
    302           * @fn          zclSampleLight_Init
    303           *
    304           * @brief       Initialization function for the zclGeneral layer.
    305           *
    306           * @param       none
    307           *
    308           * @return      none
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    311          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    312            zclSampleLight_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    313          
    314            // Set destination address to indirect
    315            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    316            zclSampleLight_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    317            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    318          
    319            // This app is part of the Home Automation Profile
    320            zclHA_Init( &zclSampleLight_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zclSampleLight_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   ??zclHA_Init?relay   ; Banked call to: zclHA_Init
    321          
    322            // Register the ZCL General Cluster Library callback functions
    323            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000021   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000023   7908         MOV     R1,#0x8
   \   000025   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay; Banked call to: zclGeneral_RegisterCmdCallbacks
    324          
    325            // Register the application's attribute list
    326            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   00002A   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002C   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   00002F   E4           CLR     A
   \   000030   93           MOVC    A,@A+DPTR
   \   000031   FA           MOV     R2,A
   \   000032   7908         MOV     R1,#0x8
   \   000034   12....       LCALL   ??zcl_registerAttrList?relay; Banked call to: zcl_registerAttrList
    327          
    328            // Register the Application to receive the unprocessed Foundation command/response messages
    329            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000037                ; Setup parameters for call to function zcl_registerForMsg
   \   000037   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??zcl_registerForMsg?relay; Banked call to: zcl_registerForMsg
    330          
    331          #ifdef ZCL_DISCOVER
    332            // Register the application's command list
    333            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
    334          #endif
    335          
    336            // Register for all key events - This app will handle all key events
    337            RegisterForKeys( zclSampleLight_TaskID );
   \   00003F                ; Setup parameters for call to function RegisterForKeys
   \   00003F   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
    338          
    339            // Register for a test endpoint
    340            afRegister( &sampleLight_TestEp );
   \   000047                ; Setup parameters for call to function afRegister
   \   000047   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000049   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   00004B   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    341          
    342          #ifdef ZCL_EZMODE
    343            // Register EZ-Mode
    344            zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
   \   00004E                ; Setup parameters for call to function zcl_RegisterEZMode
   \   00004E   7A..         MOV     R2,#zclSampleLight_RegisterEZModeData & 0xff
   \   000050   7B..         MOV     R3,#(zclSampleLight_RegisterEZModeData >> 8) & 0xff
   \   000052   12....       LCALL   ??zcl_RegisterEZMode?relay; Banked call to: zcl_RegisterEZMode
    345          
    346            // Register with the ZDO to receive Match Descriptor Responses
    347            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   000055                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000055   7A06         MOV     R2,#0x6
   \   000057   7B80         MOV     R3,#-0x80
   \   000059   EE           MOV     A,R6
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
    348          #endif
    349          
    350          
    351          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)   
    352            HalTimer1Init( 0 );
    353            halTimer1SetChannelDuty( WHITE_LED, 0 );
    354            halTimer1SetChannelDuty( RED_LED, 0 );
    355            halTimer1SetChannelDuty( BLUE_LED, 0 );
    356            halTimer1SetChannelDuty( GREEN_LED, 0 );
    357          
    358            // find if we are already on a network from NV_RESTORE
    359            uint8 state;
    360            NLME_GetRequest( nwkNwkState, 0, &state );
    361            
    362            if ( state < NWK_ENDDEVICE ) 
    363            {
    364              // Start EZMode on Start up to avoid button press
    365              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
    366            }
    367          #if ZCL_LEVEL_CTRL
    368            zclSampleLight_DefaultMove();
    369          #endif  
    370          #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    371          
    372          #ifdef ZCL_DIAGNOSTIC
    373            // Register the application's callback function to read/write attribute data.
    374            // This is only required when the attribute data format is unknown to ZCL.
    375            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   00005E                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   00005E   7C00         MOV     R4,#0x0
   \   000060   7D00         MOV     R5,#0x0
   \   000062   7A..         MOV     R2,#??zclDiagnostic_ReadWriteAttrCB?relay & 0xff
   \   000064   7B..         MOV     R3,#(??zclDiagnostic_ReadWriteAttrCB?relay >> 8) & 0xff
   \   000066   7908         MOV     R1,#0x8
   \   000068   12....       LCALL   ??zcl_registerReadWriteCB?relay; Banked call to: zcl_registerReadWriteCB
    376          
    377            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   00006B                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   00006B   12....       LCALL   ??zclDiagnostic_InitStats?relay; Banked call to: zclDiagnostic_InitStats
    378            {
    379              // Here the user could start the timer to save Diagnostics to NV
    380            }
    381          #endif
    382          
    383          #ifdef LCD_SUPPORTED
    384            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   00006E                ; Setup parameters for call to function HalLcdWriteString
   \   00006E   7903         MOV     R1,#0x3
   \   000070   7A..         MOV     R2,#sDeviceName & 0xff
   \   000072   7B..         MOV     R3,#(sDeviceName >> 8) & 0xff
   \   000074   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
    385          #endif  // LCD_SUPPORTED
    386          
    387          #ifdef ZGP_AUTO_TT
    388            zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
    389          #endif
    390          }
   \   000077   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    391          
    392          /*********************************************************************
    393           * @fn          zclSample_event_loop
    394           *
    395           * @brief       Event Loop Processor for zclGeneral.
    396           *
    397           * @param       none
    398           *
    399           * @return      none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    403            afIncomingMSGPacket_t *MSGpkt;
    404          
    405            (void)task_id;  // Intentionally unreferenced parameter
    406          
    407            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7050         JNZ     ??zclSampleLight_event_loop_0
    408            {
    409              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    410              {
    411                switch ( MSGpkt->hdr.event )
    412                {
    413          #ifdef ZCL_EZMODE
    414                  case ZDO_CB_MSG:
    415                    zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    416                    break;
    417          #endif
    418                  case ZCL_INCOMING_MSG:
    419                    // Incoming ZCL Foundation command/response messages
    420                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    421                    break;
    422          
    423                  case KEY_CHANGE:
    424                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    425                    break;
    426          
    427                  case ZDO_STATE_CHANGE:
    428                    zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
    429          
    430                    // now on the network
    431                    if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    432                         (zclSampleLight_NwkState == DEV_ROUTER)   ||
    433                         (zclSampleLight_NwkState == DEV_END_DEVICE) )
    434                    {
    435                      giLightScreenMode = LIGHT_MAINMODE;
    436                      zclSampleLight_LcdDisplayUpdate();
    437          #ifdef ZCL_EZMODE
    438                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    439          #endif // ZCL_EZMODE
    440                    }
    441                    break;
    442          
    443                  default:
    444                    break;
    445                }
    446          
    447                // Release the memory
    448                osal_msg_deallocate( (uint8 *)MSGpkt );
    449              }
    450          
    451              // return unprocessed events
    452              return (events ^ SYS_EVENT_MSG);
    453            }
    454          
    455            if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
   \   000012   EE           MOV     A,R6
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   4003         JC      $+5
   \   000017   02....       LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
    456            {
    457              if ( zclSampleLight_IdentifyTime > 0 )
   \   00001A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   600C         JZ      ??zclSampleLight_event_loop_2
    458                zclSampleLight_IdentifyTime--;
   \   000021   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000024   E0           MOVX    A,@DPTR
   \   000025   24FF         ADD     A,#-0x1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   34FF         ADDC    A,#-0x1
   \   00002C   F0           MOVX    @DPTR,A
    459              zclSampleLight_ProcessIdentifyTimeChange();
   \                     ??zclSampleLight_event_loop_2:
   \   00002D                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   00002D   12....       LCALL   ??zclSampleLight_ProcessIdentifyTimeChange?rela; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    460          
    461              return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000030   EE           MOV     A,R6
   \   000031   6401         XRL     A,#0x1
   \   000033   02....       LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
    462            }
   \                     ??zclSampleLight_event_loop_4:
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   6409         XRL     A,#0x9
   \   00003E   600A         JZ      ??zclSampleLight_event_loop_5
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6407         XRL     A,#0x7
   \   000043   6005         JZ      ??zclSampleLight_event_loop_5
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6406         XRL     A,#0x6
   \   000048   7011         JNZ     ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_5:
   \   00004A   90....       MOV     DPTR,#giLightScreenMode
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00004F   12....       LCALL   ??zclSampleLight_LcdDisplayUpdate?relay; Banked call to: zclSampleLight_LcdDisplayUpdate
   \   000052                ; Setup parameters for call to function zcl_EZModeAction
   \   000052   7A00         MOV     R2,#0x0
   \   000054   7B00         MOV     R3,#0x0
   \   000056   7902         MOV     R1,#0x2
   \   000058   12....       LCALL   ??zcl_EZModeAction?relay; Banked call to: zcl_EZModeAction
   \                     ??zclSampleLight_event_loop_6:
   \   00005B                ; Setup parameters for call to function osal_msg_deallocate
   \   00005B   AA..         MOV     R2,?V0
   \   00005D   AB..         MOV     R3,?V1
   \   00005F   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   000062                ; Setup parameters for call to function osal_msg_receive
   \   000062   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   00006A   8A..         MOV     ?V0,R2
   \   00006C   8B..         MOV     ?V1,R3
   \   00006E   EA           MOV     A,R2
   \   00006F   45..         ORL     A,?V1
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??zclSampleLight_event_loop_7 & 0xFFFF
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   24CC         ADD     A,#-0x34
   \   00007D   6039         JZ      ??zclSampleLight_event_loop_8
   \   00007F   2474         ADD     A,#0x74
   \   000081   607C         JZ      ??zclSampleLight_event_loop_9
   \   000083   24EF         ADD     A,#-0x11
   \   000085   60AF         JZ      ??zclSampleLight_event_loop_4
   \   000087   24FE         ADD     A,#-0x2
   \   000089   70D0         JNZ     ??zclSampleLight_event_loop_6
   \   00008B   EA           MOV     A,R2
   \   00008C   240C         ADD     A,#0xc
   \   00008E   F582         MOV     DPL,A
   \   000090   E4           CLR     A
   \   000091   35..         ADDC    A,?V1
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6406         XRL     A,#0x6
   \   000098   7004         JNZ     ??zclSampleLight_event_loop_10
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6480         XRL     A,#0x80
   \                     ??zclSampleLight_event_loop_10:
   \   00009E   70BB         JNZ     ??zclSampleLight_event_loop_6
   \   0000A0                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000A0   12....       LCALL   ??ZDO_ParseEPListRsp?relay; Banked call to: ZDO_ParseEPListRsp
   \   0000A3   8A..         MOV     ?V2,R2
   \   0000A5   8B..         MOV     ?V3,R3
   \   0000A7   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000AA   7905         MOV     R1,#0x5
   \   0000AC   12....       LCALL   ??zcl_EZModeAction?relay; Banked call to: zcl_EZModeAction
   \   0000AF                ; Setup parameters for call to function osal_mem_free
   \   0000AF   AA..         MOV     R2,?V2
   \   0000B1   AB..         MOV     R3,?V3
   \                     ??zclSampleLight_event_loop_11:
   \   0000B3   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000B6   80A3         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_8:
   \   0000B8   EA           MOV     A,R2
   \   0000B9   2417         ADD     A,#0x17
   \   0000BB   F8           MOV     R0,A
   \   0000BC   E4           CLR     A
   \   0000BD   35..         ADDC    A,?V1
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E8           MOV     A,R0
   \   0000C1   FA           MOV     R2,A
   \   0000C2   E9           MOV     A,R1
   \   0000C3   FB           MOV     R3,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   14           DEC     A
   \   0000CD   6011         JZ      ??zclSampleLight_event_loop_12
   \   0000CF   24FD         ADD     A,#-0x3
   \   0000D1   701A         JNZ     ??zclSampleLight_event_loop_13
   \   0000D3   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F8           MOV     R0,A
   \   0000D8   E9           MOV     A,R1
   \   0000D9   C3           CLR     C
   \   0000DA   98           SUBB    A,R0
   \   0000DB   5010         JNC     ??zclSampleLight_event_loop_13
   \   0000DD   09           INC     R1
   \   0000DE   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclSampleLight_event_loop_12:
   \   0000E0   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000E3   8001         SJMP    ??zclSampleLight_event_loop_14
   \                     ??zclSampleLight_event_loop_15:
   \   0000E5   09           INC     R1
   \                     ??zclSampleLight_event_loop_14:
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F8           MOV     R0,A
   \   0000E8   E9           MOV     A,R1
   \   0000E9   C3           CLR     C
   \   0000EA   98           SUBB    A,R0
   \   0000EB   40F8         JC      ??zclSampleLight_event_loop_15
   \                     ??zclSampleLight_event_loop_13:
   \   0000ED   8A82         MOV     DPL,R2
   \   0000EF   8B83         MOV     DPH,R3
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FA           MOV     R2,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   FB           MOV     R3,A
   \   0000F6   EA           MOV     A,R2
   \   0000F7   4B           ORL     A,R3
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \   0000FD                ; Setup parameters for call to function osal_mem_free
   \   0000FD   80B4         SJMP    ??zclSampleLight_event_loop_11
   \                     ??zclSampleLight_event_loop_9:
   \   0000FF                ; Setup parameters for call to function zclSampleLight_HandleKeys
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   FA           MOV     R2,A
   \   000104   85..82       MOV     DPL,?V0
   \   000107   8B83         MOV     DPH,R3
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F9           MOV     R1,A
   \   00010D   12....       LCALL   ??zclSampleLight_HandleKeys?relay; Banked call to: zclSampleLight_HandleKeys
   \   000110   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \                     ??zclSampleLight_event_loop_7:
   \   000113   EE           MOV     A,R6
   \   000114   FA           MOV     R2,A
   \   000115   EF           MOV     A,R7
   \   000116   6480         XRL     A,#0x80
   \   000118   8037         SJMP    ??zclSampleLight_event_loop_16
    463          
    464            if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   00011A   5410         ANL     A,#0x10
   \   00011C   600D         JZ      ??zclSampleLight_event_loop_17
    465            {
    466              giLightScreenMode = LIGHT_MAINMODE;
   \   00011E   90....       MOV     DPTR,#giLightScreenMode
   \   000121   E4           CLR     A
   \   000122   F0           MOVX    @DPTR,A
    467              zclSampleLight_LcdDisplayUpdate();
   \   000123                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   000123   12....       LCALL   ??zclSampleLight_LcdDisplayUpdate?relay; Banked call to: zclSampleLight_LcdDisplayUpdate
    468          
    469              return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
   \   000126   EE           MOV     A,R6
   \   000127   6410         XRL     A,#0x10
   \   000129   8024         SJMP    ??zclSampleLight_event_loop_3
    470            }
    471          
    472          #ifdef ZCL_EZMODE
    473          #if (defined HAL_BOARD_ZLIGHT)
    474            // event to start EZMode on startup with a delay 
    475            if ( events & SAMPLELIGHT_START_EZMODE_EVT )
    476            {
    477              // Invoke EZ-Mode
    478              zclEZMode_InvokeData_t ezModeData;
    479          
    480              // Invoke EZ-Mode
    481              ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    482              if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    483                   (zclSampleLight_NwkState == DEV_ROUTER)   ||
    484                   (zclSampleLight_NwkState == DEV_END_DEVICE) )
    485              {
    486                ezModeData.onNetwork = TRUE;      // node is already on the network
    487              }
    488              else
    489              {
    490                ezModeData.onNetwork = FALSE;     // node is not yet on the network
    491              }
    492              ezModeData.initiator = FALSE;          // OnOffLight is a target
    493              ezModeData.numActiveOutClusters = 0;
    494              ezModeData.pActiveOutClusterIDs = NULL;
    495              ezModeData.numActiveInClusters = 0;
    496              ezModeData.pActiveOutClusterIDs = NULL;
    497              zcl_InvokeEZMode( &ezModeData );
    498            
    499              return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
    500            }
    501          #endif // #if (defined HAL_BOARD_ZLIGHT)
    502            
    503            // going on to next state
    504            if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
   \                     ??zclSampleLight_event_loop_17:
   \   00012B   EE           MOV     A,R6
   \   00012C   5408         ANL     A,#0x8
   \   00012E   600E         JZ      ??zclSampleLight_event_loop_18
    505            {
    506              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
   \   000130                ; Setup parameters for call to function zcl_EZModeAction
   \   000130   7A00         MOV     R2,#0x0
   \   000132   7B00         MOV     R3,#0x0
   \   000134   7901         MOV     R1,#0x1
   \   000136   12....       LCALL   ??zcl_EZModeAction?relay; Banked call to: zcl_EZModeAction
    507              return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
   \   000139   EE           MOV     A,R6
   \   00013A   6408         XRL     A,#0x8
   \   00013C   8011         SJMP    ??zclSampleLight_event_loop_3
    508            }
    509          
    510            // the overall EZMode timer expired, so we timed out
    511            if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
   \                     ??zclSampleLight_event_loop_18:
   \   00013E   EE           MOV     A,R6
   \   00013F   5404         ANL     A,#0x4
   \   000141   7A00         MOV     R2,#0x0
   \   000143   7B00         MOV     R3,#0x0
   \   000145   600B         JZ      ??zclSampleLight_event_loop_19
    512            {
    513              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
   \   000147                ; Setup parameters for call to function zcl_EZModeAction
   \   000147   7963         MOV     R1,#0x63
   \   000149   12....       LCALL   ??zcl_EZModeAction?relay; Banked call to: zcl_EZModeAction
    514              return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
   \   00014C   EE           MOV     A,R6
   \   00014D   6404         XRL     A,#0x4
   \                     ??zclSampleLight_event_loop_3:
   \   00014F   FA           MOV     R2,A
   \   000150   EF           MOV     A,R7
   \                     ??zclSampleLight_event_loop_16:
   \   000151   FB           MOV     R3,A
    515            }
    516          #endif // ZLC_EZMODE
    517          
    518          #ifdef ZCL_LEVEL_CTRL
    519            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
    520            {
    521              zclSampleLight_AdjustLightLevel();
    522              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
    523            }
    524          #endif
    525          
    526            // Discard unknown events
    527            return 0;
   \                     ??zclSampleLight_event_loop_19:
   \   000152   7402         MOV     A,#0x2
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
   \   000157   7F06         MOV     R7,#0x6
   \   000159   02....       LJMP    ?BANKED_LEAVE_XDATA
    528          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B                ; Setup parameters for call to function zcl_EZModeAction
   \   00000B                ; Setup parameters for call to function zcl_EZModeAction
   \   00000B   AA..         MOV     R2,?XSP + 0
   \   00000D   AB..         MOV     R3,?XSP + 1
   \   00000F   22           RET
    529          
    530          /*********************************************************************
    531           * @fn      zclSampleLight_HandleKeys
    532           *
    533           * @brief   Handles all key events for this device.
    534           *
    535           * @param   shift - true if in shift/alt.
    536           * @param   keys - bit field for key events. Valid entries:
    537           *                 HAL_KEY_SW_5
    538           *                 HAL_KEY_SW_4
    539           *                 HAL_KEY_SW_2
    540           *                 HAL_KEY_SW_1
    541           *
    542           * @return  none
    543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          static void zclSampleLight_HandleKeys( byte shift, byte keys )
   \                     zclSampleLight_HandleKeys:
    545          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    546            if ( keys & HAL_KEY_SW_1 )
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5011         JNC     ??zclSampleLight_HandleKeys_0
    547            {
    548              giLightScreenMode = LIGHT_MAINMODE;
   \   000012   90....       MOV     DPTR,#giLightScreenMode
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    549          
    550              // toggle local light immediately
    551              zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   000017   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6003         JZ      ??zclSampleLight_HandleKeys_1
   \   00001D   E4           CLR     A
   \   00001E   8002         SJMP    ??zclSampleLight_HandleKeys_2
   \                     ??zclSampleLight_HandleKeys_1:
   \   000020   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_2:
   \   000022   F0           MOVX    @DPTR,A
    552          #ifdef ZCL_LEVEL_CTRL
    553              zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    554          #endif
    555            }
    556          
    557            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclSampleLight_HandleKeys_0:
   \   000023   EF           MOV     A,R7
   \   000024   A2E1         MOV     C,0xE0 /* A   */.1
   \   000026   505E         JNC     ??zclSampleLight_HandleKeys_3
    558            {
    559          #if (defined HAL_BOARD_ZLIGHT) 
    560              
    561              zclSampleLight_BasicResetCB();
    562          
    563          #else    
    564              
    565              giLightScreenMode = LIGHT_MAINMODE;
   \   000028   90....       MOV     DPTR,#giLightScreenMode
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    566          
    567          #ifdef ZCL_EZMODE
    568              {
    569                // Invoke EZ-Mode
    570                zclEZMode_InvokeData_t ezModeData;
    571          
    572                // Invoke EZ-Mode
    573                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7408         MOV     A,#0x8
   \   000035   F0           MOVX    @DPTR,A
    574                if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    575                    (zclSampleLight_NwkState == DEV_ROUTER)   ||
    576                      (zclSampleLight_NwkState == DEV_END_DEVICE) )
   \   000036   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6409         XRL     A,#0x9
   \   00003C   600A         JZ      ??zclSampleLight_HandleKeys_4
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6407         XRL     A,#0x7
   \   000041   6005         JZ      ??zclSampleLight_HandleKeys_4
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6406         XRL     A,#0x6
   \   000046   7009         JNZ     ??zclSampleLight_HandleKeys_5
    577                {
    578                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zclSampleLight_HandleKeys_4:
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   8006         SJMP    ??zclSampleLight_HandleKeys_6
    579                }
    580                else
    581                {
    582                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zclSampleLight_HandleKeys_5:
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \                     ??zclSampleLight_HandleKeys_6:
   \   000057   F0           MOVX    @DPTR,A
    583                }
    584                ezModeData.initiator = FALSE;          // OnOffLight is a target
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    585                ezModeData.numActiveOutClusters = 0;
   \   00005F   7406         MOV     A,#0x6
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    586                ezModeData.pActiveOutClusterIDs = NULL;
   \   000066   7407         MOV     A,#0x7
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
    587                ezModeData.numActiveInClusters = 0;
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
    588                ezModeData.pActiveOutClusterIDs = NULL;
   \   000076   7407         MOV     A,#0x7
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   F0           MOVX    @DPTR,A
    589                zcl_InvokeEZMode( &ezModeData );
   \   00007F                ; Setup parameters for call to function zcl_InvokeEZMode
   \   00007F   AA..         MOV     R2,?XSP + 0
   \   000081   AB..         MOV     R3,?XSP + 1
   \   000083   12....       LCALL   ??zcl_InvokeEZMode?relay; Banked call to: zcl_InvokeEZMode
    590              }
    591          
    592          #else // NOT EZ-Mode
    593              {
    594                zAddrType_t dstAddr;
    595                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    596          
    597                // Initiate an End Device Bind Request, this bind request will
    598                // only use a cluster list that is important to binding.
    599                dstAddr.addrMode = afAddr16Bit;
    600                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    601                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    602                                     SAMPLELIGHT_ENDPOINT,
    603                                     ZCL_HA_PROFILE_ID,
    604                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    605                                     0, NULL,   // No Outgoing clusters to bind
    606                                     TRUE );
    607              }
    608          #endif // ZCL_EZMODE
    609          #endif // HAL_BOARD_ZLIGHT     
    610            }
    611          
    612            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleLight_HandleKeys_3:
   \   000086   EF           MOV     A,R7
   \   000087   A2E3         MOV     C,0xE0 /* A   */.3
   \   000089   5023         JNC     ??zclSampleLight_HandleKeys_7
    613            {
    614              giLightScreenMode = LIGHT_MAINMODE;
   \   00008B   90....       MOV     DPTR,#giLightScreenMode
   \   00008E   E4           CLR     A
   \   00008F   F0           MOVX    @DPTR,A
    615          
    616              if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
    617                    ( zclSampleLight_NwkState == DEV_ROUTER ) )
   \   000090   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000093   E0           MOVX    A,@DPTR
   \   000094   6409         XRL     A,#0x9
   \   000096   6005         JZ      ??zclSampleLight_HandleKeys_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6407         XRL     A,#0x7
   \   00009B   7011         JNZ     ??zclSampleLight_HandleKeys_7
    618              {
    619                // toggle permit join
    620                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \                     ??zclSampleLight_HandleKeys_8:
   \   00009D   90....       MOV     DPTR,#gPermitDuration
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   6003         JZ      ??zclSampleLight_HandleKeys_9
   \   0000A3   E4           CLR     A
   \   0000A4   8002         SJMP    ??zclSampleLight_HandleKeys_10
   \                     ??zclSampleLight_HandleKeys_9:
   \   0000A6   74FF         MOV     A,#-0x1
   \                     ??zclSampleLight_HandleKeys_10:
   \   0000A8   F0           MOVX    @DPTR,A
    621                NLME_PermitJoiningRequest( gPermitDuration );
   \   0000A9                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   ??NLME_PermitJoiningRequest?relay; Banked call to: NLME_PermitJoiningRequest
    622              }
    623            }
    624          
    625            // Shift F5 does a Basic Reset (factory defaults)
    626            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zclSampleLight_HandleKeys_7:
   \   0000AE   EE           MOV     A,R6
   \   0000AF   600A         JZ      ??zclSampleLight_HandleKeys_11
   \   0000B1   EF           MOV     A,R7
   \   0000B2   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000B4   5016         JNC     ??zclSampleLight_HandleKeys_12
    627            {
    628              zclSampleLight_BasicResetCB();
   \   0000B6                ; Setup parameters for call to function zclSampleLight_BasicResetCB
   \   0000B6   12....       LCALL   ??zclSampleLight_BasicResetCB?relay; Banked call to: zclSampleLight_BasicResetCB
   \   0000B9   8011         SJMP    ??zclSampleLight_HandleKeys_12
    629            }
    630            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleLight_HandleKeys_11:
   \   0000BB   EF           MOV     A,R7
   \   0000BC   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000BE   500C         JNC     ??zclSampleLight_HandleKeys_12
    631            {
    632              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
   \   0000C0   90....       MOV     DPTR,#giLightScreenMode
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6003         JZ      ??zclSampleLight_HandleKeys_13
   \   0000C6   E4           CLR     A
   \   0000C7   8002         SJMP    ??zclSampleLight_HandleKeys_14
   \                     ??zclSampleLight_HandleKeys_13:
   \   0000C9   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_14:
   \   0000CB   F0           MOVX    @DPTR,A
    633            }
    634          
    635            // update the display, including the light
    636            zclSampleLight_LcdDisplayUpdate();
   \                     ??zclSampleLight_HandleKeys_12:
   \   0000CC                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   0000CC   12....       LCALL   ??zclSampleLight_LcdDisplayUpdate?relay; Banked call to: zclSampleLight_LcdDisplayUpdate
    637          }
   \   0000CF   7409         MOV     A,#0x9
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D4   02....       LJMP    ?Subroutine0 & 0xFFFF
    638          
    639          /*********************************************************************
    640           * @fn      zclSampleLight_LcdDisplayUpdate
    641           *
    642           * @brief   Called to update the LCD display.
    643           *
    644           * @param   none
    645           *
    646           * @return  none
    647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    648          void zclSampleLight_LcdDisplayUpdate( void )
   \                     zclSampleLight_LcdDisplayUpdate:
    649          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    650          #ifdef LCD_SUPPORTED
    651            if ( giLightScreenMode == LIGHT_HELPMODE )
   \   000004   90....       MOV     DPTR,#giLightScreenMode
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7014         JNZ     ??zclSampleLight_LcdDisplayUpdate_0
    652            {
    653              zclSampleLight_LcdDisplayHelpMode();
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   7A..         MOV     R2,#sSwLight & 0xff
   \   000010   7B..         MOV     R3,#(sSwLight >> 8) & 0xff
   \   000012   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
   \   000015                ; Setup parameters for call to function HalLcdWriteString
   \   000015   7902         MOV     R1,#0x2
   \   000017   7A..         MOV     R2,#sSwEZMode & 0xff
   \   000019   7B..         MOV     R3,#(sSwEZMode >> 8) & 0xff
   \   00001B   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
   \   00001E                ; Setup parameters for call to function HalLcdWriteString
   \   00001E   802F         SJMP    ??zclSampleLight_LcdDisplayUpdate_1
    654            }
    655            else
    656            {
    657              zclSampleLight_LcdDisplayMainMode();
   \                     ??zclSampleLight_LcdDisplayUpdate_0:
   \   000020   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6409         XRL     A,#0x9
   \   000026   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_2
   \   000028                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000028   7900         MOV     R1,#0x0
   \   00002A   8010         SJMP    ??zclSampleLight_LcdDisplayUpdate_3
   \                     ??zclSampleLight_LcdDisplayUpdate_2:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6407         XRL     A,#0x7
   \   00002F   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_4
   \   000031                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000031   7901         MOV     R1,#0x1
   \   000033   8007         SJMP    ??zclSampleLight_LcdDisplayUpdate_3
   \                     ??zclSampleLight_LcdDisplayUpdate_4:
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6406         XRL     A,#0x6
   \   000038   7005         JNZ     ??zclSampleLight_LcdDisplayUpdate_5
   \   00003A                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00003A   7902         MOV     R1,#0x2
   \                     ??zclSampleLight_LcdDisplayUpdate_3:
   \   00003C   12....       LCALL   ??zclHA_LcdStatusLine1?relay; Banked call to: zclHA_LcdStatusLine1
   \                     ??zclSampleLight_LcdDisplayUpdate_5:
   \   00003F   90....       MOV     DPTR,#gPermitDuration
   \   000042   E0           MOVX    A,@DPTR
   \   000043   90....       MOV     DPTR,#sSwHelp + 15
   \   000046   6004         JZ      ??zclSampleLight_LcdDisplayUpdate_6
   \   000048   742A         MOV     A,#0x2a
   \   00004A   8002         SJMP    ??zclSampleLight_LcdDisplayUpdate_7
   \                     ??zclSampleLight_LcdDisplayUpdate_6:
   \   00004C   7420         MOV     A,#0x20
   \                     ??zclSampleLight_LcdDisplayUpdate_7:
   \   00004E   F0           MOVX    @DPTR,A
   \                     ??zclSampleLight_LcdDisplayUpdate_1:
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7903         MOV     R1,#0x3
   \   000051   7A..         MOV     R2,#sSwHelp & 0xff
   \   000053   7B..         MOV     R3,#(sSwHelp >> 8) & 0xff
   \   000055   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
    658            }
    659          #endif
    660          
    661            zclSampleLight_DisplayLight();
   \   000058   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6401         XRL     A,#0x1
   \   00005E   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_8
   \   000060                ; Setup parameters for call to function HalLedSet
   \   000060   7A01         MOV     R2,#0x1
   \   000062   8002         SJMP    ??zclSampleLight_LcdDisplayUpdate_9
   \                     ??zclSampleLight_LcdDisplayUpdate_8:
   \   000064                ; Setup parameters for call to function HalLedSet
   \   000064   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_LcdDisplayUpdate_9:
   \   000066   7901         MOV     R1,#0x1
   \   000068   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   00006B   90....       MOV     DPTR,#giLightScreenMode
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   7015         JNZ     ??zclSampleLight_LcdDisplayUpdate_10
   \   000071   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000074   E0           MOVX    A,@DPTR
   \   000075   7902         MOV     R1,#0x2
   \   000077   6006         JZ      ??zclSampleLight_LcdDisplayUpdate_11
   \   000079                ; Setup parameters for call to function HalLcdWriteString
   \   000079   7A..         MOV     R2,#sLightOn & 0xff
   \   00007B   7B..         MOV     R3,#(sLightOn >> 8) & 0xff
   \   00007D   8004         SJMP    ??zclSampleLight_LcdDisplayUpdate_12
   \                     ??zclSampleLight_LcdDisplayUpdate_11:
   \   00007F                ; Setup parameters for call to function HalLcdWriteString
   \   00007F   7A..         MOV     R2,#sLightOff & 0xff
   \   000081   7B..         MOV     R3,#(sLightOff >> 8) & 0xff
   \                     ??zclSampleLight_LcdDisplayUpdate_12:
   \   000083   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
    662          }
   \                     ??zclSampleLight_LcdDisplayUpdate_10:
   \   000086   80..         SJMP    ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    663          
    664          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)  
    665          /*********************************************************************
    666           * @fn      zclSampleLight_UpdateLampLevel
    667           *
    668           * @brief   Update lamp level output with gamma compensation
    669           *
    670           * @param   level
    671           *
    672           * @return  none
    673           */
    674          void zclSampleLight_UpdateLampLevel( uint8 level )
    675          
    676          {
    677            uint16 gammaCorrectedLevel;
    678          
    679            // gamma correct the level
    680            gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
    681          
    682            halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );  
    683          }
    684          #endif
    685          
    686          /*********************************************************************
    687           * @fn      zclSampleLight_DisplayLight
    688           *
    689           * @brief   Displays current state of light on LED and also on main display if supported.
    690           *
    691           * @param   none
    692           *
    693           * @return  none
    694           */
    695          static void zclSampleLight_DisplayLight( void )
    696          {
    697            // set the LED1 based on light (on or off)
    698            if ( zclSampleLight_OnOff == LIGHT_ON )
    699            {
    700              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    701            }
    702            else
    703            {
    704              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    705            }
    706          
    707          #ifdef LCD_SUPPORTED
    708            if (giLightScreenMode == LIGHT_MAINMODE)
    709            {
    710          #ifdef ZCL_LEVEL_CTRL
    711              // display current light level
    712              if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    713                   ( zclSampleLight_OnOff == LIGHT_OFF ) )
    714              {
    715                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    716              }
    717              else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    718                        ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
    719                         ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    720                           ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
    721              {
    722                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    723              }
    724              else    // "    LEVEL ###"
    725              {
    726                zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
    727                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    728              }
    729          #else
    730              if ( zclSampleLight_OnOff )
    731              {
    732                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    733              }
    734              else
    735              {
    736                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    737              }
    738          #endif // ZCL_LEVEL_CTRL
    739            }
    740          #endif // LCD_SUPPORTED
    741          }
    742          
    743          #ifdef LCD_SUPPORTED
    744          /*********************************************************************
    745           * @fn      zclSampleLight_LcdDisplayMainMode
    746           *
    747           * @brief   Called to display the main screen on the LCD.
    748           *
    749           * @param   none
    750           *
    751           * @return  none
    752           */
    753          static void zclSampleLight_LcdDisplayMainMode( void )
    754          {
    755            // display line 1 to indicate NWK status
    756            if ( zclSampleLight_NwkState == DEV_ZB_COORD )
    757            {
    758              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
    759            }
    760            else if ( zclSampleLight_NwkState == DEV_ROUTER )
    761            {
    762              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
    763            }
    764            else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
    765            {
    766              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
    767            }
    768          
    769            // end of line 3 displays permit join status (*)
    770            if ( gPermitDuration )
    771            {
    772              sSwHelp[15] = '*';
    773            }
    774            else
    775            {
    776              sSwHelp[15] = ' ';
    777            }
    778            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    779          }
    780          
    781          /*********************************************************************
    782           * @fn      zclSampleLight_LcdDisplayHelpMode
    783           *
    784           * @brief   Called to display the SW options on the LCD.
    785           *
    786           * @param   none
    787           *
    788           * @return  none
    789           */
    790          static void zclSampleLight_LcdDisplayHelpMode( void )
    791          {
    792            HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
    793            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
    794            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    795          }
    796          #endif  // LCD_SUPPORTED
    797          
    798          /*********************************************************************
    799           * @fn      zclSampleLight_ProcessIdentifyTimeChange
    800           *
    801           * @brief   Called to process any change to the IdentifyTime attribute.
    802           *
    803           * @param   none
    804           *
    805           * @return  none
    806           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    807          static void zclSampleLight_ProcessIdentifyTimeChange( void )
   \                     zclSampleLight_ProcessIdentifyTimeChange:
    808          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    809            if ( zclSampleLight_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   6026         JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
    810            {
    811              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000B                ; Setup parameters for call to function osal_start_timerEx
   \   00000B   90....       MOV     DPTR,#__Constant_3e8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
    812              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000022                ; Setup parameters for call to function HalLedBlink
   \   000022   7CE8         MOV     R4,#-0x18
   \   000024   7D03         MOV     R5,#0x3
   \   000026   7B05         MOV     R3,#0x5
   \   000028   7AFF         MOV     R2,#-0x1
   \   00002A   7908         MOV     R1,#0x8
   \   00002C   12....       LCALL   ??HalLedBlink?relay  ; Banked call to: HalLedBlink
   \   00002F   801F         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
    813            }
    814            else
    815            {
    816          #ifdef ZCL_EZMODE
    817              if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_0:
   \   000031   90....       MOV     DPTR,#zclSampleLight_IdentifyCommissionState
   \   000034   E0           MOVX    A,@DPTR
   \   000035   A2E1         MOV     C,0xE0 /* A   */.1
   \   000037   5004         JNC     ??zclSampleLight_ProcessIdentifyTimeChange_2
    818              {
    819                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   000039                ; Setup parameters for call to function HalLedSet
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   8002         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_3
    820              }
    821              else
    822              {
    823                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_2:
   \   00003D                ; Setup parameters for call to function HalLedSet
   \   00003D   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_3:
   \   00003F   7908         MOV     R1,#0x8
   \   000041   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
    824              }
    825          #endif
    826          
    827              osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000044                ; Setup parameters for call to function osal_stop_timerEx
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
    828            }
    829          }
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_1:
   \   000050   80..         SJMP    ??Subroutine6_0
    830          
    831          /*********************************************************************
    832           * @fn      zclSampleLight_BasicResetCB
    833           *
    834           * @brief   Callback from the ZCL General Cluster Library
    835           *          to set all the Basic Cluster attributes to default values.
    836           *
    837           * @param   none
    838           *
    839           * @return  none
    840           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine6_0
   \   000003                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    842          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    843            NLME_LeaveReq_t leaveReq;
    844            // Set every field to 0
    845            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    846            
    847            // This will enable the device to rejoin the network after reset.
    848            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    849            
    850            // Set the NV startup option to force a "new" join.
    851            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );    
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
    852            
    853            // Leave the network, and reset afterwards
    854            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   ??NLME_LeaveReq?relay; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zclSampleLight_BasicResetCB_0
    855            {
    856              // Couldn't send out leave; prepare to reset anyway
    857              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
    858            }
    859          }
   \                     ??zclSampleLight_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   02....       LJMP    ?Subroutine1 & 0xFFFF
    860          
    861          /*********************************************************************
    862           * @fn      zclSampleLight_IdentifyCB
    863           *
    864           * @brief   Callback from the ZCL General Cluster Library when
    865           *          it received an Identity Command for this application.
    866           *
    867           * @param   srcAddr - source address and endpoint of the response message
    868           * @param   identifyTime - the number of seconds to identify yourself
    869           *
    870           * @return  none
    871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    872          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleLight_IdentifyCB:
    873          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    874            zclSampleLight_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00000D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    875            zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   ??zclSampleLight_ProcessIdentifyTimeChange?rela; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    876          }
   \   000018   02....       LJMP    ??Subroutine6_0 & 0xFFFF
    877          
    878          /*********************************************************************
    879           * @fn      zclSampleLight_IdentifyQueryRspCB
    880           *
    881           * @brief   Callback from the ZCL General Cluster Library when
    882           *          it received an Identity Query Response Command for this application.
    883           *
    884           * @param   srcAddr - requestor's address
    885           * @param   timeout - number of seconds to identify yourself (valid for query response)
    886           *
    887           * @return  none
    888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    889          static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleLight_IdentifyQueryRspCB:
    890          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    891            (void)pRsp;
    892          #ifdef ZCL_EZMODE
    893            {
    894              zclEZMode_ActionData_t data;
    895              data.pIdentifyQueryRsp = pRsp;
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
    896              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
    897            }
   \                     ??CrossCallReturnLabel_2:
   \   00000C   7904         MOV     R1,#0x4
   \   00000E   12....       LCALL   ??zcl_EZModeAction?relay; Banked call to: zcl_EZModeAction
    898          #endif
    899          }
   \   000011   7402         MOV     A,#0x2
   \   000013   02....       LJMP    ?Subroutine1 & 0xFFFF
    900          
    901          /*********************************************************************
    902           * @fn      zclSampleLight_OnOffCB
    903           *
    904           * @brief   Callback from the ZCL General Cluster Library when
    905           *          it received an On/Off Command for this application.
    906           *
    907           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    908           *
    909           * @return  none
    910           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    911          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    912          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    913            // Turn on the light
    914            if ( cmd == COMMAND_ON )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   600E         JZ      ??zclSampleLight_OnOffCB_0
    915            {
    916              zclSampleLight_OnOff = LIGHT_ON;
    917            }
    918            // Turn off the light
    919            else if ( cmd == COMMAND_OFF )
   \   00000C   EE           MOV     A,R6
   \   00000D   6012         JZ      ??zclSampleLight_OnOffCB_1
    920            {
    921              zclSampleLight_OnOff = LIGHT_OFF;
    922            }
    923            // Toggle the light
    924            else if ( cmd == COMMAND_TOGGLE )
   \   00000F   7402         MOV     A,#0x2
   \   000011   6E           XRL     A,R6
   \   000012   7012         JNZ     ??zclSampleLight_OnOffCB_2
    925            {
    926              if ( zclSampleLight_OnOff == LIGHT_OFF )
   \   000014   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7007         JNZ     ??zclSampleLight_OnOffCB_1
    927              {
    928                zclSampleLight_OnOff = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_0:
   \   00001A   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00001D   7401         MOV     A,#0x1
   \   00001F   8004         SJMP    ??zclSampleLight_OnOffCB_3
    929              }
    930              else
    931              {
    932                zclSampleLight_OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_1:
   \   000021   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000024   E4           CLR     A
   \                     ??zclSampleLight_OnOffCB_3:
   \   000025   F0           MOVX    @DPTR,A
    933              }
    934            }
    935          
    936          #if ZCL_LEVEL_CTRL
    937            zclSampleLight_DefaultMove( );
    938          #endif
    939          
    940            // update the display
    941            zclSampleLight_LcdDisplayUpdate( );
   \                     ??zclSampleLight_OnOffCB_2:
   \   000026                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   000026   12....       LCALL   ??zclSampleLight_LcdDisplayUpdate?relay; Banked call to: zclSampleLight_LcdDisplayUpdate
    942          }
   \   000029                REQUIRE ?Subroutine0
   \   000029                ; // Fall through to label ?Subroutine0
    943          
    944          #ifdef ZCL_LEVEL_CTRL
    945          /*********************************************************************
    946           * @fn      zclSampleLight_TimeRateHelper
    947           *
    948           * @brief   Calculate time based on rate, and startup level state machine
    949           *
    950           * @param   newLevel - new level for current level
    951           *
    952           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
    953           */
    954          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
    955          {
    956            uint32 diff;
    957            uint32 newLevel32;
    958          
    959            // remember current and new level
    960            zclSampleLight_NewLevel = newLevel;
    961            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
    962          
    963            // calculate diff
    964            newLevel32 = (uint32)1000 * newLevel;
    965            if ( zclSampleLight_LevelCurrentLevel > newLevel )
    966            {
    967              diff = zclSampleLight_CurrentLevel32 - newLevel32;
    968              zclSampleLight_NewLevelUp = FALSE;  // moving down
    969            }
    970            else
    971            {
    972              diff = newLevel32 - zclSampleLight_CurrentLevel32;
    973              zclSampleLight_NewLevelUp = TRUE;   // moving up
    974            }
    975          
    976            return ( diff );
    977          }
    978          
    979          /*********************************************************************
    980           * @fn      zclSampleLight_MoveBasedOnRate
    981           *
    982           * @brief   Calculate time based on rate, and startup level state machine
    983           *
    984           * @param   newLevel - new level for current level
    985           * @param   rate16   - fixed point rate (e.g. 16.123)
    986           *
    987           * @return  none
    988           */
    989          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
    990          {
    991            uint32 diff;
    992          
    993            // determine how much time (in 10ths of seconds) based on the difference and rate
    994            zclSampleLight_Rate32 = rate;
    995            diff = zclSampleLight_TimeRateHelper( newLevel );
    996            zclSampleLight_LevelRemainingTime = diff / rate;
    997            if ( !zclSampleLight_LevelRemainingTime )
    998            {
    999              zclSampleLight_LevelRemainingTime = 1;
   1000            }
   1001          
   1002            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1003          }
   1004          
   1005          /*********************************************************************
   1006           * @fn      zclSampleLight_MoveBasedOnTime
   1007           *
   1008           * @brief   Calculate rate based on time, and startup level state machine
   1009           *
   1010           * @param   newLevel  - new level for current level
   1011           * @param   time      - in 10ths of seconds
   1012           *
   1013           * @return  none
   1014           */
   1015          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   1016          {
   1017            uint16 diff;
   1018          
   1019            // determine rate (in units) based on difference and time
   1020            diff = zclSampleLight_TimeRateHelper( newLevel );
   1021            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   1022            zclSampleLight_Rate32 = diff / time;
   1023          
   1024            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1025          }
   1026          
   1027          /*********************************************************************
   1028           * @fn      zclSampleLight_GetTime
   1029           *
   1030           * @brief   Determine amount of time that MoveXXX will take to complete.
   1031           *
   1032           * @param   level = new level to move to
   1033           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
   1034           *
   1035           * @return  none
   1036           */
   1037          static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
   1038          {
   1039            // there is a hiearchy of the amount of time to use for transistioning
   1040            // check each one in turn. If none of defaults are set, then use fastest
   1041            // time possible.
   1042            if ( time == 0xFFFF )
   1043            {
   1044              // use On or Off Transition Time if set (not 0xffff)
   1045              if ( zclSampleLight_OnOff == LIGHT_ON )
   1046              {
   1047                time = zclSampleLight_LevelOffTransitionTime;
   1048              }
   1049              else
   1050              {
   1051                time = zclSampleLight_LevelOnTransitionTime;
   1052              }
   1053          
   1054              // else use OnOffTransitionTime if set (not 0xffff)
   1055              if ( time == 0xFFFF )
   1056              {
   1057                time = zclSampleLight_LevelOnOffTransitionTime;
   1058              }
   1059          
   1060              // else as fast as possible
   1061              if ( time == 0xFFFF )
   1062              {
   1063                time = 1;
   1064              }
   1065            }
   1066          
   1067            if ( !time )
   1068            {
   1069              time = 1; // as fast as possible
   1070            }
   1071          
   1072            return ( time );
   1073          }
   1074          
   1075          /*********************************************************************
   1076           * @fn      zclSampleLight_DefaultMove
   1077           *
   1078           * @brief   We were turned on/off. Use default time to move to on or off.
   1079           *
   1080           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
   1081           *
   1082           * @return  none
   1083           */
   1084          static void zclSampleLight_DefaultMove( void )
   1085          {
   1086            uint8  newLevel;
   1087            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
   1088            uint16 time;
   1089          
   1090            // if moving to on position, move to on level
   1091            if ( zclSampleLight_OnOff )
   1092            {
   1093              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1094              {
   1095                // The last Level (before going OFF) should be used)
   1096                newLevel = zclSampleLight_LevelLastLevel;
   1097              }
   1098              else
   1099              {
   1100                newLevel = zclSampleLight_LevelOnLevel;
   1101              }
   1102          
   1103              time = zclSampleLight_LevelOnTransitionTime;
   1104            }
   1105            else
   1106            {
   1107              newLevel = ATTR_LEVEL_MIN_LEVEL;
   1108          
   1109              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1110              {
   1111                // Save the current Level before going OFF to use it when the light turns ON
   1112                // it should be back to this level
   1113                zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   1114              }
   1115          
   1116              time = zclSampleLight_LevelOffTransitionTime;
   1117            }
   1118          
   1119            // else use OnOffTransitionTime if set (not 0xffff)
   1120            if ( time == 0xFFFF )
   1121            {
   1122              time = zclSampleLight_LevelOnOffTransitionTime;
   1123            }
   1124          
   1125            // else as fast as possible
   1126            if ( time == 0xFFFF )
   1127            {
   1128              time = 1;
   1129            }
   1130          
   1131            // calculate rate based on time (int 10ths) for full transition (1-254)
   1132            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
   1133          
   1134            // start up state machine.
   1135            zclSampleLight_WithOnOff = TRUE;
   1136            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1137          }
   1138          
   1139          /*********************************************************************
   1140           * @fn      zclSampleLight_AdjustLightLevel
   1141           *
   1142           * @brief   Called each 10th of a second while state machine running
   1143           *
   1144           * @param   none
   1145           *
   1146           * @return  none
   1147           */
   1148          static void zclSampleLight_AdjustLightLevel( void )
   1149          {
   1150            // one tick (10th of a second) less
   1151            if ( zclSampleLight_LevelRemainingTime )
   1152            {
   1153              --zclSampleLight_LevelRemainingTime;
   1154            }
   1155          
   1156            // no time left, done
   1157            if ( zclSampleLight_LevelRemainingTime == 0)
   1158            {
   1159              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   1160            }
   1161          
   1162            // still time left, keep increment/decrementing
   1163            else
   1164            {
   1165              if ( zclSampleLight_NewLevelUp )
   1166              {
   1167                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   1168              }
   1169              else
   1170              {
   1171                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   1172              }
   1173              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   1174            }
   1175          
   1176          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1177            zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
   1178          #endif
   1179            
   1180            // also affect on/off
   1181            if ( zclSampleLight_WithOnOff )
   1182            {
   1183              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   1184              {
   1185                zclSampleLight_OnOff = LIGHT_ON;
   1186          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)      
   1187                ENABLE_LAMP;     
   1188          #endif      
   1189              }
   1190              else
   1191              {
   1192                zclSampleLight_OnOff = LIGHT_OFF;
   1193          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)      
   1194                DISABLE_LAMP;
   1195          #endif      
   1196              }
   1197            }
   1198          
   1199            // display light level as we go
   1200            zclSampleLight_DisplayLight( );
   1201          
   1202            // keep ticking away
   1203            if ( zclSampleLight_LevelRemainingTime )
   1204            {
   1205              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1206            }
   1207          }
   1208          
   1209          /*********************************************************************
   1210           * @fn      zclSampleLight_LevelControlMoveToLevelCB
   1211           *
   1212           * @brief   Callback from the ZCL General Cluster Library when
   1213           *          it received a LevelControlMoveToLevel Command for this application.
   1214           *
   1215           * @param   pCmd - ZigBee command parameters
   1216           *
   1217           * @return  none
   1218           */
   1219          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   1220          {
   1221            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1222            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   1223          }
   1224          
   1225          /*********************************************************************
   1226           * @fn      zclSampleLight_LevelControlMoveCB
   1227           *
   1228           * @brief   Callback from the ZCL General Cluster Library when
   1229           *          it received a LevelControlMove Command for this application.
   1230           *
   1231           * @param   pCmd - ZigBee command parameters
   1232           *
   1233           * @return  none
   1234           */
   1235          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   1236          {
   1237            uint8 newLevel;
   1238            uint32 rate;
   1239          
   1240            // convert rate from units per second to units per tick (10ths of seconds)
   1241            // and move at that right up or down
   1242            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1243          
   1244            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   1245            {
   1246              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   1247            }
   1248            else
   1249            {
   1250              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   1251            }
   1252          
   1253            rate = (uint32)100 * pCmd->rate;
   1254            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1255          }
   1256          
   1257          /*********************************************************************
   1258           * @fn      zclSampleLight_LevelControlStepCB
   1259           *
   1260           * @brief   Callback from the ZCL General Cluster Library when
   1261           *          it received an On/Off Command for this application.
   1262           *
   1263           * @param   pCmd - ZigBee command parameters
   1264           *
   1265           * @return  none
   1266           */
   1267          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   1268          {
   1269            uint8 newLevel;
   1270          
   1271            // determine new level, but don't exceed boundaries
   1272            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   1273            {
   1274              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   1275              {
   1276                newLevel = ATTR_LEVEL_MAX_LEVEL;
   1277              }
   1278              else
   1279              {
   1280                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   1281              }
   1282            }
   1283            else
   1284            {
   1285              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   1286              {
   1287                newLevel = ATTR_LEVEL_MIN_LEVEL;
   1288              }
   1289              else
   1290              {
   1291                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   1292              }
   1293            }
   1294          
   1295            // move to the new level
   1296            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1297            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   1298          }
   1299          
   1300          /*********************************************************************
   1301           * @fn      zclSampleLight_LevelControlStopCB
   1302           *
   1303           * @brief   Callback from the ZCL General Cluster Library when
   1304           *          it received an Level Control Stop Command for this application.
   1305           *
   1306           * @param   pCmd - ZigBee command parameters
   1307           *
   1308           * @return  none
   1309           */
   1310          static void zclSampleLight_LevelControlStopCB( void )
   1311          {
   1312            // stop immediately
   1313            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   1314            zclSampleLight_LevelRemainingTime = 0;
   1315          }
   1316          #endif
   1317          
   1318          /******************************************************************************
   1319           *
   1320           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1321           *
   1322           *****************************************************************************/
   1323          
   1324          /*********************************************************************
   1325           * @fn      zclSampleLight_ProcessIncomingMsg
   1326           *
   1327           * @brief   Process ZCL Foundation incoming message
   1328           *
   1329           * @param   pInMsg - pointer to the received message
   1330           *
   1331           * @return  none
   1332           */
   1333          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1334          {
   1335            switch ( pInMsg->zclHdr.commandID )
   1336            {
   1337          #ifdef ZCL_READ
   1338              case ZCL_CMD_READ_RSP:
   1339                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   1340                break;
   1341          #endif
   1342          #ifdef ZCL_WRITE
   1343              case ZCL_CMD_WRITE_RSP:
   1344                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   1345                break;
   1346          #endif
   1347          #ifdef ZCL_REPORT
   1348              // Attribute Reporting implementation should be added here
   1349              case ZCL_CMD_CONFIG_REPORT:
   1350                // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
   1351                break;
   1352          
   1353              case ZCL_CMD_CONFIG_REPORT_RSP:
   1354                // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
   1355                break;
   1356          
   1357              case ZCL_CMD_READ_REPORT_CFG:
   1358                // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
   1359                break;
   1360          
   1361              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1362                // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
   1363                break;
   1364          
   1365              case ZCL_CMD_REPORT:
   1366                // zclSampleLight_ProcessInReportCmd( pInMsg );
   1367                break;
   1368          #endif
   1369              case ZCL_CMD_DEFAULT_RSP:
   1370                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1371                break;
   1372          #ifdef ZCL_DISCOVER
   1373              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1374                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1375                break;
   1376          
   1377              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1378                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1379                break;
   1380          
   1381              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1382                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   1383                break;
   1384          
   1385              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1386                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1387                break;
   1388          #endif
   1389              default:
   1390                break;
   1391            }
   1392          
   1393            if ( pInMsg->attrCmd )
   1394              osal_mem_free( pInMsg->attrCmd );
   1395          }
   1396          
   1397          #ifdef ZCL_READ
   1398          /*********************************************************************
   1399           * @fn      zclSampleLight_ProcessInReadRspCmd
   1400           *
   1401           * @brief   Process the "Profile" Read Response Command
   1402           *
   1403           * @param   pInMsg - incoming message to process
   1404           *
   1405           * @return  none
   1406           */
   1407          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1408          {
   1409            zclReadRspCmd_t *readRspCmd;
   1410            uint8 i;
   1411          
   1412            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1413            for (i = 0; i < readRspCmd->numAttr; i++)
   1414            {
   1415              // Notify the originator of the results of the original read attributes
   1416              // attempt and, for each successfull request, the value of the requested
   1417              // attribute
   1418            }
   1419          
   1420            return ( TRUE );
   1421          }
   1422          #endif // ZCL_READ
   1423          
   1424          #ifdef ZCL_WRITE
   1425          /*********************************************************************
   1426           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1427           *
   1428           * @brief   Process the "Profile" Write Response Command
   1429           *
   1430           * @param   pInMsg - incoming message to process
   1431           *
   1432           * @return  none
   1433           */
   1434          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1435          {
   1436            zclWriteRspCmd_t *writeRspCmd;
   1437            uint8 i;
   1438          
   1439            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1440            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1441            {
   1442              // Notify the device of the results of the its original write attributes
   1443              // command.
   1444            }
   1445          
   1446            return ( TRUE );
   1447          }
   1448          #endif // ZCL_WRITE
   1449          
   1450          /*********************************************************************
   1451           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1452           *
   1453           * @brief   Process the "Profile" Default Response Command
   1454           *
   1455           * @param   pInMsg - incoming message to process
   1456           *
   1457           * @return  none
   1458           */
   1459          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1460          {
   1461            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1462          
   1463            // Device is notified of the Default Response command.
   1464            (void)pInMsg;
   1465          
   1466            return ( TRUE );
   1467          }
   1468          
   1469          #ifdef ZCL_DISCOVER
   1470          /*********************************************************************
   1471           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1472           *
   1473           * @brief   Process the Discover Commands Response Command
   1474           *
   1475           * @param   pInMsg - incoming message to process
   1476           *
   1477           * @return  none
   1478           */
   1479          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1480          {
   1481            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1482            uint8 i;
   1483          
   1484            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1485            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1486            {
   1487              // Device is notified of the result of its attribute discovery command.
   1488            }
   1489          
   1490            return ( TRUE );
   1491          }
   1492          
   1493          /*********************************************************************
   1494           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1495           *
   1496           * @brief   Process the "Profile" Discover Attributes Response Command
   1497           *
   1498           * @param   pInMsg - incoming message to process
   1499           *
   1500           * @return  none
   1501           */
   1502          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1503          {
   1504            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1505            uint8 i;
   1506          
   1507            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1508            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1509            {
   1510              // Device is notified of the result of its attribute discovery command.
   1511            }
   1512          
   1513            return ( TRUE );
   1514          }
   1515          
   1516          /*********************************************************************
   1517           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1518           *
   1519           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1520           *
   1521           * @param   pInMsg - incoming message to process
   1522           *
   1523           * @return  none
   1524           */
   1525          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1526          {
   1527            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1528            uint8 i;
   1529          
   1530            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1531            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1532            {
   1533              // Device is notified of the result of its attribute discovery command.
   1534            }
   1535          
   1536            return ( TRUE );
   1537          }
   1538          #endif // ZCL_DISCOVER
   1539          
   1540          #if ZCL_EZMODE
   1541          /*********************************************************************
   1542           * @fn      zclSampleLight_ProcessZDOMsgs
   1543           *
   1544           * @brief   Called when this node receives a ZDO/ZDP response.
   1545           *
   1546           * @param   none
   1547           *
   1548           * @return  status
   1549           */
   1550          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1551          {
   1552            zclEZMode_ActionData_t data;
   1553            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1554          
   1555            // Let EZ-Mode know of the Simple Descriptor Response
   1556            if ( pMsg->clusterID == Match_Desc_rsp )
   1557            {
   1558              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   1559              data.pMatchDescRsp = pMatchDescRsp;
   1560              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1561              osal_mem_free( pMatchDescRsp );
   1562            }
   1563          }
   1564          
   1565          /*********************************************************************
   1566           * @fn      zclSampleLight_EZModeCB
   1567           *
   1568           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1569          *           going on during EZ-Mode steering/finding/binding.
   1570           *
   1571           * @param   state - an
   1572           *
   1573           * @return  none
   1574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1575          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   \                     zclSampleLight_EZModeCB:
   1576          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1577          #ifdef LCD_SUPPORTED
   1578            char *pStr;
   1579            uint8 err;
   1580          #endif
   1581          
   1582            // time to go into identify mode
   1583            if ( state == EZMODE_STATE_IDENTIFYING )
   \   00000B   7404         MOV     A,#0x4
   \   00000D   65..         XRL     A,?V0
   \   00000F   7018         JNZ     ??zclSampleLight_EZModeCB_0
   1584            {
   1585          #ifdef LCD_SUPPORTED
   1586              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   000011                ; Setup parameters for call to function HalLcdWriteString
   \   000011   7902         MOV     R1,#0x2
   \   000013   7A..         MOV     R2,#`?<Constant "EZMode">` & 0xff
   \   000015   7B..         MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   000017   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
   1587          #endif
   1588          
   1589              zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   \   00001A   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   00001D   74B4         MOV     A,#-0x4c
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
   1590              zclSampleLight_ProcessIdentifyTimeChange();
   \   000023                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000023   12....       LCALL   ??zclSampleLight_ProcessIdentifyTimeChange?rela; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   \   000026   02....       LJMP    ??zclSampleLight_EZModeCB_1 & 0xFFFF
   1591            }
   1592          
   1593            // autoclosing, show what happened (success, cancelled, etc...)
   1594            if( state == EZMODE_STATE_AUTOCLOSE )
   \                     ??zclSampleLight_EZModeCB_0:
   \   000029   7407         MOV     A,#0x7
   \   00002B   65..         XRL     A,?V0
   \   00002D   7028         JNZ     ??zclSampleLight_EZModeCB_2
   1595            {
   1596          #ifdef LCD_SUPPORTED
   1597              pStr = NULL;
   1598              err = pData->sAutoClose.err;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   1599              if ( err == EZMODE_ERR_SUCCESS )
   \   000035   7006         JNZ     ??zclSampleLight_EZModeCB_3
   1600              {
   1601                pStr = "EZMode: Success";
   \   000037   7A..         MOV     R2,#`?<Constant "EZMode: Success">` & 0xff
   \   000039   7B..         MOV     R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
   \   00003B   8009         SJMP    ??zclSampleLight_EZModeCB_4
   1602              }
   1603              else if ( err == EZMODE_ERR_NOMATCH )
   \                     ??zclSampleLight_EZModeCB_3:
   \   00003D   7404         MOV     A,#0x4
   \   00003F   68           XRL     A,R0
   \   000040   7072         JNZ     ??zclSampleLight_EZModeCB_1
   1604              {
   1605                pStr = "EZMode: NoMatch"; // not a match made in heaven
   \   000042   7A..         MOV     R2,#`?<Constant "EZMode: NoMatch">` & 0xff
   \   000044   7B..         MOV     R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
   1606              }
   1607              if ( pStr )
   \                     ??zclSampleLight_EZModeCB_4:
   \   000046   EA           MOV     A,R2
   \   000047   4B           ORL     A,R3
   \   000048   606A         JZ      ??zclSampleLight_EZModeCB_1
   1608              {
   1609                if ( giLightScreenMode == LIGHT_MAINMODE )
   \   00004A   90....       MOV     DPTR,#giLightScreenMode
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   7064         JNZ     ??zclSampleLight_EZModeCB_1
   1610                {
   1611                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000050                ; Setup parameters for call to function HalLcdWriteString
   \   000050   7902         MOV     R1,#0x2
   \   000052   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
   \   000055   805D         SJMP    ??zclSampleLight_EZModeCB_1
   1612                }
   1613              }
   1614          #endif
   1615            }
   1616          
   1617            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1618            if( state == EZMODE_STATE_FINISH )
   \                     ??zclSampleLight_EZModeCB_2:
   \   000057   7463         MOV     A,#0x63
   \   000059   65..         XRL     A,?V0
   \   00005B   7057         JNZ     ??zclSampleLight_EZModeCB_1
   1619            {
   1620              // turn off identify mode
   1621              zclSampleLight_IdentifyTime = 0;
   \   00005D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   F0           MOVX    @DPTR,A
   1622              zclSampleLight_ProcessIdentifyTimeChange();
   \   000064                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000064   12....       LCALL   ??zclSampleLight_ProcessIdentifyTimeChange?rela; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   1623          
   1624          #ifdef LCD_SUPPORTED
   1625              // if successful, inform user which nwkaddr/ep we bound to
   1626              pStr = NULL;
   1627              err = pData->sFinish.err;
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   1628              if( err == EZMODE_ERR_SUCCESS )
   \   00006D   602E         JZ      ??zclSampleLight_EZModeCB_5
   1629              {
   1630                // already stated on autoclose
   1631              }
   1632              else if ( err == EZMODE_ERR_CANCELLED )
   \   00006F   7402         MOV     A,#0x2
   \   000071   68           XRL     A,R0
   \   000072   7006         JNZ     ??zclSampleLight_EZModeCB_6
   1633              {
   1634                pStr = "EZMode: Cancel";
   \   000074   7A..         MOV     R2,#`?<Constant "EZMode: Cancel">` & 0xff
   \   000076   7B..         MOV     R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
   \   000078   8014         SJMP    ??zclSampleLight_EZModeCB_7
   1635              }
   1636              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   \                     ??zclSampleLight_EZModeCB_6:
   \   00007A   7401         MOV     A,#0x1
   \   00007C   68           XRL     A,R0
   \   00007D   7006         JNZ     ??zclSampleLight_EZModeCB_8
   1637              {
   1638                pStr = "EZMode: BadParm";
   \   00007F   7A..         MOV     R2,#`?<Constant "EZMode: BadParm">` & 0xff
   \   000081   7B..         MOV     R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
   \   000083   8009         SJMP    ??zclSampleLight_EZModeCB_7
   1639              }
   1640              else if ( err == EZMODE_ERR_TIMEDOUT )
   \                     ??zclSampleLight_EZModeCB_8:
   \   000085   7403         MOV     A,#0x3
   \   000087   68           XRL     A,R0
   \   000088   7013         JNZ     ??zclSampleLight_EZModeCB_5
   1641              {
   1642                pStr = "EZMode: TimeOut";
   \   00008A   7A..         MOV     R2,#`?<Constant "EZMode: TimeOut">` & 0xff
   \   00008C   7B..         MOV     R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
   1643              }
   1644              if ( pStr )
   \                     ??zclSampleLight_EZModeCB_7:
   \   00008E   EA           MOV     A,R2
   \   00008F   4B           ORL     A,R3
   \   000090   600B         JZ      ??zclSampleLight_EZModeCB_5
   1645              {
   1646                if ( giLightScreenMode == LIGHT_MAINMODE )
   \   000092   90....       MOV     DPTR,#giLightScreenMode
   \   000095   E0           MOVX    A,@DPTR
   \   000096   7005         JNZ     ??zclSampleLight_EZModeCB_5
   1647                {
   1648                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000098                ; Setup parameters for call to function HalLcdWriteString
   \   000098   7902         MOV     R1,#0x2
   \   00009A   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
   1649                }
   1650              }
   1651          #endif
   1652              // show main UI screen 3 seconds after binding
   1653              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   \                     ??zclSampleLight_EZModeCB_5:
   \   00009D                ; Setup parameters for call to function osal_start_timerEx
   \   00009D   90....       MOV     DPTR,#__Constant_bb8
   \   0000A0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000A3   7A10         MOV     R2,#0x10
   \   0000A5   7B00         MOV     R3,#0x0
   \   0000A7   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000AF   7404         MOV     A,#0x4
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
   1654            }
   1655          }
   \                     ??zclSampleLight_EZModeCB_1:
   \   0000B4   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   08           DB 8
   \   000001   ....         DW zclSampleLight_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sSwHelp>`:
   \   000000   5357353A     DB "SW5: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW ??zclSampleLight_BasicResetCB?relay
   \   000002   ....         DW ??zclSampleLight_IdentifyCB?relay
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW ??zclSampleLight_IdentifyQueryRspCB?relay
   \   00000C   ....         DW ??zclSampleLight_OnOffCB?relay
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_LcdDisplayUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_ProcessIdentifyTimeChange?rela:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_OnOffCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleLight_EZModeCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_EZModeCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode">`:
   \   000000   455A4D6F     DB "EZMode"
   \            646500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Success">`:
   \   000000   455A4D6F     DB "EZMode: Success"
   \            64653A20
   \            53756363
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: NoMatch">`:
   \   000000   455A4D6F     DB "EZMode: NoMatch"
   \            64653A20
   \            4E6F4D61
   \            74636800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Cancel">`:
   \   000000   455A4D6F     DB "EZMode: Cancel"
   \            64653A20
   \            43616E63
   \            656C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: BadParm">`:
   \   000000   455A4D6F     DB "EZMode: BadParm"
   \            64653A20
   \            42616450
   \            61726D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: TimeOut">`:
   \   000000   455A4D6F     DB "EZMode: TimeOut"
   \            64653A20
   \            54696D65
   \            4F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000
   1656          #endif // ZCL_EZMODE
   1657          
   1658          /****************************************************************************
   1659          ****************************************************************************/
   1660          
   1661          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     23   zclSampleLight_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     13   zclSampleLight_EZModeCB
        0      9   -> HalLcdWriteString
        0     13   -> osal_start_timerEx
        0      9   -> zclSampleLight_ProcessIdentifyTimeChange
      0     34   zclSampleLight_HandleKeys
        0     18   -> NLME_PermitJoiningRequest
        0     18   -> zclSampleLight_BasicResetCB
        0     18   -> zclSampleLight_LcdDisplayUpdate
        0     18   -> zcl_InvokeEZMode
      2      0   zclSampleLight_IdentifyCB
        2      0   -> zclSampleLight_ProcessIdentifyTimeChange
      2      2   zclSampleLight_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0      9   zclSampleLight_Init
        0      9   -> HalLcdWriteString
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_RegisterEZMode
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      2     18   zclSampleLight_LcdDisplayUpdate
        2      0   -> HalLcdWriteString
        2      0   -> HalLedSet
        2      0   -> zclHA_LcdStatusLine1
      0      9   zclSampleLight_OnOffCB
        0      9   -> zclSampleLight_LcdDisplayUpdate
      2     20   zclSampleLight_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      0     16   zclSampleLight_event_loop
        0     16   -> ZDO_ParseEPListRsp
        0     16   -> osal_mem_free
        0     16   -> osal_msg_deallocate
        0     16   -> osal_msg_receive
        0     16   -> zclSampleLight_HandleKeys
        0     16   -> zclSampleLight_LcdDisplayUpdate
        0     16   -> zclSampleLight_ProcessIdentifyTimeChange
        0     16   -> zcl_EZModeAction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "EZMode">
      16  ?<Constant "EZMode: BadParm">
      15  ?<Constant "EZMode: Cancel">
      16  ?<Constant "EZMode: NoMatch">
      16  ?<Constant "EZMode: Success">
      16  ?<Constant "EZMode: TimeOut">
      17  ?<Initializer for sSwHelp>
       6  ?<Initializer for sampleLight_TestEp>
      32  ?<Initializer for zclSampleLight_CmdCallbacks>
       1  ?<Initializer for zclSampleLight_NwkState>
       6  ??Subroutine5_0
       7  ??Subroutine6_0
       6  ??zclSampleLight_BasicResetCB?relay
       6  ??zclSampleLight_EZModeCB?relay
       6  ??zclSampleLight_HandleKeys?relay
       6  ??zclSampleLight_IdentifyCB?relay
       6  ??zclSampleLight_IdentifyQueryRspCB?relay
       6  ??zclSampleLight_Init?relay
       6  ??zclSampleLight_LcdDisplayUpdate?relay
       6  ??zclSampleLight_OnOffCB?relay
       6  ??zclSampleLight_ProcessIdentifyTimeChange?rela
       6  ??zclSampleLight_event_loop?relay
       5  ?Subroutine0
       3  ?Subroutine1
      14  ?Subroutine2
      16  ?Subroutine3
       3  ?Subroutine4
       4  __Constant_3e8
       4  __Constant_bb8
       1  gPermitDuration
       1  giLightScreenMode
       2  sClearLine
      15  sDeviceName
      14  sLightOff
      14  sLightOn
      13  sSwEZMode
      17  sSwHelp
      17  sSwLight
       6  sampleLight_TestEp
       1  zclSampleLightSeqNum
      57  zclSampleLight_BasicResetCB
      32  zclSampleLight_CmdCallbacks
      12  zclSampleLight_DstAddr
     183  zclSampleLight_EZModeCB
     215  zclSampleLight_HandleKeys
      27  zclSampleLight_IdentifyCB
      22  zclSampleLight_IdentifyQueryRspCB
     122  zclSampleLight_Init
     136  zclSampleLight_LcdDisplayUpdate
       1  zclSampleLight_NwkState
      41  zclSampleLight_OnOffCB
      82  zclSampleLight_ProcessIdentifyTimeChange
      10  zclSampleLight_RegisterEZModeData
       1  zclSampleLight_TaskID
     348  zclSampleLight_event_loop

 
 1 287 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    56 bytes in segment XDATA_I
    56 bytes in segment XDATA_ID
   179 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
 1 403 bytes of CODE  memory
   171 bytes of CONST memory (+ 8 bytes shared)
    72 bytes of XDATA memory

Errors: none
Warnings: none
